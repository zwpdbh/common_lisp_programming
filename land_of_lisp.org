* Chapter 02
** Global Variable
   - A variable that is defined globally in Lisp is called a top-level definition.
     #+BEGIN_SRC lisp
       (defparameter *big* 100)
       (defparameter *small* 1)
     #+END_SRC

     #+RESULTS:
     : *SMALL*

     #+END_SRC
** Basic Lisp Eitquette
   - spaces and line breaks are completely ignored when Lisp reads in your 
** Defining Global Functions in Lisp
   - Defining the guess-my-number Function
     #+BEGIN_SRC lisp
       (defun guess-my-number ()
	 (ash (+ *small* *big*) -1))
     #+END_SRC

     #+RESULTS:
     : GUESS-MY-NUMBER

   - Every command in Common Lisp generates a return value
     - The 'defun'
   - "ash" is commonly used for binary searches in Lisp. It looks at a number in binary form, and then shifts its binary bits to the left or right, dropping any bits lost in the process.
     - +1 means shift bits to left.
     - -1 means shift bits to right, half the integer.
*** Defining the smaller and bigger functions
    #+BEGIN_SRC lisp
      (defun smaller ()
	(setf *big* (1- (guess-my-number)))
	(guess-my-number))

      (defun bigger ()
	(setf *small* (1+ (guess-my-number)))
	(guess-my-number))
    #+END_SRC

    #+RESULTS:
    : BIGGER

*** Define the start-over function
    #+BEGIN_SRC lisp
      (defun start-over ()
	(defparameter *small* 1)
	(defparameter *big* 100)
	(guess-my-number))
    #+END_SRC

** Defining Local Variables in Lisp
   To limit your definition to a single function or a block of code, you need to define local variable
   - use 'let'
     #+BEGIN_SRC lisp
       (let (variable declarations)
	 ...body...)

       (let ((a 5)
	     (b 6))
	 (+ a b)) ; = 11
     #+END_SRC

** Defining Local Function in Lisp
   #+BEGIN_SRC lisp
     (flet ((f (n)
	      (+ n 10)))
       (f 5))
   #+END_SRC

   #+RESULTS:
   : 15
   - As with let, you can define one or more functions within the scope of the flet
   #+BEGIN_SRC lisp
     (flet (
	    (f (n)
	      (+ n 10))
	    (g (n)
	      (- n 3)))
       (g (f 5)))
   #+END_SRC

   #+RESULTS:
   : 12
   
   - To make function names available in defined functions, we can use the labels command, its structure is similar to the flet command
     #+BEGIN_SRC lisp
       (labels (
		(f (n)
		  (+ n 10))
		(g (n)
		  (+ (f n) 6)))
	 (g 10))
     #+END_SRC

     #+RESULTS:
     : 26

*** Summary
    - define a glabal variable
      - defparameter
      - defvar
    - define a global function
      - defun
    - define local variable
      - let
    - set value
      - setf
    - define local functions
      - flet
      - labels (the defined function could call itself, recursively)


* Ch03 Exploring the syntax of lisp code
** The Building Block of Lisp Syntax
   - Symbols
     #+BEGIN_SRC lisp
       (eq 'fool 'FoOL)
     #+END_SRC

     #+RESULTS:
     : T

   - Numbers
   - Strings
     - To indicate a string in Lisp, surround characters with double quotes.
     - Use "princ" to display a string
       #+BEGIN_SRC lisp
	 (princ "Hello World")
       #+END_SRC

       #+RESULTS:
       : Hello World

** How Lisp Distinguishes Between Code and Data
   How does lisp decide which parts of your program consist of code (stuff to be executed) and which parts are just data?

*** Code Mode
    - code should be in a special type of list: a form
      - A form is simply a slit with a special command at the beginning, typically the name of a function.

*** Data Mode
    - By placing a quote in front of lists, you are telling lisp: "This next part isn't a command. It is just a chunk of data for my program". This is called quoting.

** Lists in Lisp
   You can think of a Lisp program as a house. If you were to build a house in Lisp, your walls would be made out of lists. The bricks would be made out of symbols, numbers, and strings. And like wall needs mortar to hold it together, lists in Lisp are hold together by structures called cons cells.

*** Cons Cells and List Functions
    - The cons Function
      If you want to link any two pieces of data in your Lisp program, you can do that with cons function. When you call cons, the Lisp compiler typically allocates a small chunk of memory, the cons cell that can hold two references to the objects being linked.
      #+BEGIN_SRC lisp
	(cons 'zw 'pdbh)
      #+END_SRC

      #+RESULTS:
      : (ZW . PDBH)
      The dot between the two connected item make this a cons cell. Do not confuse this with a regular list, it just links those two items together.
      
*** The car and cdr Functions
    #+BEGIN_SRC lisp
      (car '(zw pd bh))
      (cdr '(zw pd bh))
    #+END_SRC

*** The list function
    The following 3 are the same:
    #+BEGIN_SRC lisp
      (cons 'pork (cons 'beef (cons 'chicken)))
      (list 'pork 'beef 'chicken)
      '(pork beef chicken)
    #+END_SRC
*** Summary
    - Lists are created from cons cells
    - You can create lists by making cons cells with the cons command.
    - Inspect the pieces of a list with car and cdr.


* Ch04 Making Decisions With Conditions
** The symmetry of nil and ()
*** Empty Euals False
    - empty list == false, non-empty list == true
    - Because we can easily detect anempty list, we can process lists using recursion.
      #+BEGIN_SRC lisp
	(defun my-length (list)
	  (if list
	      (1+ (my-length (cdr list)))
	      0))

	(my-length '(a b c d e f g))
      #+END_SRC

      #+RESULTS:
      : 7
      
*** THe four disguises of ()
    - Not only does the empty list evaluate to false, but it is the only false value in common lisp.
      Any value not equivalent to an empty list will be considered a true value.
    - These four are all equivalent
      - '()
      - ()
      - 'nil
      - nil

** The conditionals: if and beyond
*** One thing at a time with If
    - only one of the expression after the if is actually evaluated
    - only do one thing in an if statement
    - Usually, when a function is executed in lisp, all the expressions after the function name are evaluated, before the function itself is evaluated. However, if does not follow these rules.
      'IF' is a special form, which gives it special previleges, such as the right to not evaluated all its parameters in the normal way. 
      Conditional commands in Lisp are typically special forms.
    - Use 'progn' to wedge extra commands in a single expression. With progn, only the last evaluation is returned as the value of the full expression.

*** Going Beyond if: The when and unless Alternatives
    SInce it's kind of a pain to use progn every time you want to do multiple things inside an if. Lisp has several other commands that include an implicit progn.
    - when
      #+BEGIN_SRC lisp
	(defvar *number-is-odd* nil)
	(when (oddp 5)
	  (setf *number-is-odd* t)
	  'odd-number)
      #+END_SRC

      #+RESULTS:
      : ODD-NUMBER
  
    - unless, which is the oppisite of when

*** The Command That Does It All: cond
    #+BEGIN_SRC lisp
      (defvar *arch-empty* nil)
      (defun pudding-eater (person)
	(cond
	  ((eq person 'henry)
	   (setf *arch-empty* 'stupid-lisp-alien)
	   '(curse you lisp alien - you ate my pudding))
	  ((eq person 'johnny)
	   (setf *arch-empty* 'useless-old-johnny)
	   '(I hope you choked on my pudding johnny))
	  (t '(why you eat my pudding stranger?))))
    #+END_SRC

    #+RESULTS:
    : PUDDING-EATER

    - The cond form is the classic way to do branching in Lisp.
    - The body of a cond uses a layer of parentheses to separate the different branches of the condition.
    - 't' guaranteeing that at least the last brach will always be evaluated. Just like 'else'.

*** Braching with case
    Because the case command uses eq for comparisions, it is usually used only for branching on SYMBOL. It cannot be used to branch on string values, among other things. 
    #+BEGIN_SRC lisp
      (defun pudding-eater (person)
	(case person
	  ((henry) (setf *arch-empty* 'stupid-lisp-alien)
	   '(curse you lisp alien - you ate my pudding))
	  ((johnny) (setf *arch-empty* 'useless-old-johnny)
	   '(I hope you choked on my pudding johnny))
	  (otherwise '(why you eat my pudding stranger?))))
    #+END_SRC

    #+RESULTS:
    : PUDDING-EATER
      
** Cool Thricks with Conditions
*** Using the stealth Conditionals and 'and', 'or' 
*** Using Funcitons that Return More than Just the Truth
    - Whenever a Lisper writes a function that returns true and false, she will think to herself, "Is there anything else I could return other than just t" Since all non-nil values in Common Lisp evaluate to true, return some other value is essentially a freebie.
 
** Comparing Stuff: eq, equal, and More
   - eq, Symbols should always be compared to other symbols with EQ.
   - equal, If you are not dealing with two symbols, just use EQUAL. It will tell you when two things are isomorphic, meaning they "look the same".
   - eql, similar to eq, but also handles comparisions of numbers and characters.
   - equalp, same as equal but with a bit of extra sophistication.

** Summary
   - nil, 'nil, (), '()
   - Lisp conditional
     - if
     - when
     - unless
     - cond
   - comparison
     - eq
     - equal

* Building a text game engine
  Handling text is not a computer's strength. It is necessary evial best kep to a minimum.

** Describing the scenery with an Association list
   The world inside our adventure game is very simple, containing only three location. Let define a global variable which contains a list and description of our 3 locations. It basically gives us a way to find a piece of data associated with a lookup key. This type of structure is called an association list, or alist.
   #+BEGIN_SRC lisp
     (defparameter *node* '((living-room (you are in the living-room. A wizard is snoring loudly on the couch))
			    (garden (you are in a beautiful garden. there is a well in front of you))
			    (attic (you are in the attic. there is a giant welding torch in the corner.))))
   #+END_SRC

   #+RESULTS:
   : *NODE*
   Using lists and symbols as an intermediary for manipulating text is an old-school Lisp technique. However, it can often lead to very elegant code, since lisp and symbol operations are so fundamental to lisp.
   most experienced Lispers will try to focus on these datatypes in the design of their software whenever possible.
   
** Describing the Location
   - use assoc function to find the correct item in the alist
     #+BEGIN_SRC lisp
       (assoc 'garden *node*)
     #+END_SRC

     #+RESULTS:
     | GARDEN | (YOU ARE IN A BEAUTIFUL GARDEN. THERE IS A WELL IN FRONT OF YOU) |
     
   - With assoc, we can easily create the describe-location function
     #+BEGIN_SRC lisp
       (defun describe-location (location nodes)
	 (cadr (assoc location nodes)))
       (describe-location 'living-room *node*)
     #+END_SRC

     #+RESULTS:
     | YOU | ARE | IN | THE | LIVING-ROOM. | A | WIZARD | IS | SNORING | LOUDLY | ON | THE | COUCH |
   - Functional programming style
     - A function will reference only parameters or variables declared in the function itself. And it will do nothing besides return a value.
     - By writing functions that don't reference variables in the "outside world" directly and that don't perform any actions other than returning a value, you can write code that can easily be tested in isolation.

** Describing the Paths
   We now need descriptions of paths to other location. We will create a second global variable that contains the paths that players can take to move between places on our map.
   #+BEGIN_SRC lisp
     (defparameter *edge* '((living-room (garden west door) (attic upstairs ladder))
			    (garden (living-room east door))
			    (attic (living-room downstairs ladder))))
   #+END_SRC

   #+RESULTS:
   : *EDGE*

   Then, use this structure to create the describe-path function which builds a textual description of a given edge using our symbols system.
   #+BEGIN_SRC lisp
     (defun describe-edge (edge)
       `(there is a ,(caddr edge) going ,(cadr edge) from here.))
     ;; notice the ` not '
     (describe '(garden west door))
   #+END_SRC

   #+RESULTS:

*** Describing multiple path as Once
    It could generate descriptions for all edges from a given location by looking up the location from our data structure of edges:
    #+BEGIN_SRC lisp
      (defun describe-edges (location edges)
	(apply #'append (mapcar #'describe-edge (cdr (assoc location edges)))))
      (describe-edges 'living-room *edge*)
    #+END_SRC

    #+RESULTS:
    | THERE | IS | A | DOOR | GOING | WEST | FROM | HERE. | THERE | IS | A | LADDER | GOING | UPSTAIRS | FROM | HERE. |

    - HIGH order function, 'mapcar'
      #+BEGIN_SRC lisp
	(mapcar #'sqrt '(1 2 3 4 5))
      #+END_SRC

      #+RESULTS:
      | 1.0 | 1.4142135 | 1.7320508 | 2.0 | 2.236068 |
      This function takes another function and a list, and then applies this function to every member of a list. The function names we pass into mapcar have the #' symbols, which is shorthand for the function operator.

*** Joining the Descriptions
    It joins several lists into one big list.
    #+BEGIN_SRC lisp
      (append '(zw) '(pd) '(b) '(h))
    #+END_SRC

    #+RESULTS:
    | ZW | PD | B | H |
    A problem of append is that it need each list to be separated list marked seperated using ', to solve this we could use apply.
    #+BEGIN_SRC lisp
      (apply #'append '((1 2) (3) (4 5 6)))
    #+END_SRC

    #+RESULTS:
    | 1 | 2 | 3 | 4 | 5 | 6 |


** Describing Objects at a Specific Location
*** Listing visible objects
    #+BEGIN_SRC lisp
      (defparameter *objects* '(whiskey bucket frog chain))
    #+END_SRC

    #+RESULTS:
    : *OBJECTS*
    
    Also create a second variable to track the location of each object in the form of an alist:
    #+BEGIN_SRC lisp
      (defparameter *object-locations* '((whiskey living-room)
					 (bucket living-room)
					 (chain garden)
					 (frog garden)))
    #+END_SRC

    #+RESULTS:
    : *OBJECT-LOCATIONS*

    A function that lists the objects visiable from a given location:
    #+BEGIN_SRC lisp
      (defun objects-at (loc objs obj-locs)
	;; use labels to define local function
	(labels ((at-loc-p (obj)
		   (eq (cadr (assoc obj obj-locs)) loc)))
	  ;; remove all things from a list for which a passed-in function doesn't return true.
	  (remove-if-not #'at-loc-p objs)))
      ;; the result of this function returns a filtered list of objects consisting of those items for which at-loc-p is true

      (objects-at 'living-room *objects* *object-locations*)
    #+END_SRC

    #+RESULTS:
    | WHISKEY | BUCKET |
    
    "xxx-p" function name means it is boolean function, p stands for predicates.

*** Describing Visible Objects
    Now, we could write a function to describe the objects visible at a given location.
    #+BEGIN_SRC lisp
      (defun describe-objects (loc objs obj-loc)
	(labels ((describe-obj (obj)
		   `(you see a ,obj on the floor.)))
	  (apply #'append (mapcar #'describe-obj (objects-at loc objs obj-loc)))))

      (describe-objects 'living-room *objects* *object-locations*)
    #+END_SRC

    #+RESULTS:
    | YOU | SEE | A | WHISKEY | ON | THE | FLOOR. | YOU | SEE | A | BUCKET | ON | THE | FLOOR. |


** Describing It All
   Now we tie all of these description functions into one easy command called look.
   
