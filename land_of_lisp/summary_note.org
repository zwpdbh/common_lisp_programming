* Chapter09
  - setf, to do generic getter
  - makehash
    - gethash
  - values, return multiple values
  - multiple-value-bind
    - lead to more optimized and cleaner code
  - structure
    #+BEGIN_SRC lisp
      (defstruct person
        name 
        age
        waist-size
        favorite-color)

      (defparameter *bob* (make-person :name "bob"
                                       :age 35
                                       :waist-size 32
                                       :favorite-color "blue"))
    #+END_SRC

    #+RESULTS:
    : *BOB*

** Handling Data in a Generic Way
   - sequence functions
*** For searching
    - length
    - find-if
    - count
    - position
    - some
    - every
*** For iterating across a sequence
    - reduce
      #+BEGIN_SRC lisp
        (reduce (lambda (best item)
                  (if (and (evenp item) (> item best))
                      item 
                      best))
                '(7 4 6 5 2)
                :initial-value 0)
      #+END_SRC

      #+RESULTS:
      : 6


      - Specifying an initial value for the reduce function is often necessary, or a bug can sneak into your code!
      - It is generic! It can reduce lists, arrays, or strings in exactly the same way.
    - map
      Similar to mapcar, but it works on all sequence types, not just lists. So You need to pass an extra parameter to specify the type of sequence to return from the mapping.
      #+BEGIN_SRC lisp
        (map 'array 
             (lambda (x)
               (if (eq x #\s)
                   #\S
                   x))
             "this is a string")
      #+END_SRC 

      #+RESULTS:
      : #(#\t #\h #\i #\S #\Space #\i #\S #\Space #\a #\Space #\S #\t #\r #\i #\n #\g)

    - subseq
      lets you pull a subsequence out of a larger sequence
      #+begin_src lisp
	(subseq "0123456" 1 3)
      #+end_src

      #+RESULTS:
      : 12
	
    - sort
      #+begin_src lisp
	(sort '(10 9 7 8) #'<)
      #+end_src

      #+RESULTS:
      | 7 | 8 | 9 | 10 |

*** Creating your own generic functions with type predicates
    - common predicates
      - arrayp
      - characterp
      - consp
      - functionp
      - hash-table-p
      - listp
      - stringp
      - symbolp

    - A generic function with add number or list depend on the type
      #+begin_src lisp
	(defun add (a b)
	  (cond ((and (numberp a) (numberp b))
		 (+ a b))
		((and (listp a) (listp b))
		 (append a b))))
      #+end_src
	
      #+begin_src lisp
      (add 3 4)
      #+end_src

      #+RESULTS:
      : 7

      #+begin_src lisp
	(add '(a b) '(3 4))
      #+end_src

      #+RESULTS:
      | A | B | 3 | 4 |

    - Use defmethod, do not directly predicates to do multiple case generic
      #+begin_src lisp
	(defmethod my-plus ((a number)
			    (b number))
	  (+ a b))

	(defmethod my-plus ((a list)
			    (b list))
	  (append a b))
      #+end_src
      

    - test
      <el


* Chapter10
** loop
   - ex01, counting from a starting point to an ending point
     #+begin_src emacs-lisp
       (loop for i
	     from 5
	     to 100
	     sum 1)
     #+end_src

     #+RESULTS:
     : 96

   - ex02, iterating through values in a list 
     #+begin_src emacs-lisp
       (loop for i
	     in '(100 1000 10000)
	     sum i)
     #+end_src

     #+RESULTS:
     : 11100

   - ex03, doing stuff in a loop
     #+begin_src emacs-lisp
       (loop for i
	     below 5
	     do (print i))
     #+end_src

     #+RESULTS:

   - ex04, doing stuff under certain conditions
     #+begin_src emacs-lisp
       (loop for i
	     below 10
	     when (oddp i)
	     do (print i))
     #+end_src

     #+RESULTS:

   - ex05, breaking out of a loop early
     #+begin_src emacs-lisp
       (let ((n 0))
	 (loop for i
	       from 0
	       do (setf n (+ n 1))
	       when (= i 5)
	       return n))
     #+end_src

     #+RESULTS:
     : 6

   - ex06, collecting a list of values
     #+begin_src emacs-lisp
       (loop for i
	     in '(2 3 4 5 6)
	     collect (* i i))
     #+end_src

     #+RESULTS:
     | 4 | 9 | 16 | 25 | 36 |

   - ex07, using multiple for clauses
     #+begin_src emacs-lisp
       (loop for x below 10
	     for y below 10
	     collect (+ x y))
     #+end_src

     #+RESULTS:
     | 0 | 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 |

   - ex08, cartesian production between multiple range
     #+begin_src emacs-lisp
       (loop for x below 10
	     collect (loop for y below 10
			   collect (+ x y)))
     #+end_src

     #+RESULTS:
     | 0 |  1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 |
     | 1 |  2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 |
     | 2 |  3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 |
     | 3 |  4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 |
     | 4 |  5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 |
     | 5 |  6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 |
     | 6 |  7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 |
     | 7 |  8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 |
     | 8 |  9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 |
     | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 |

   - ex09, give list item 
     #+begin_src emacs-lisp
       (loop for i
	     from 0
	     for day
	     in '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)
	     collect (cons i day))
     #+end_src

     #+RESULTS:
     : ((0 . Monday) (1 . Tuesday) (2 . Wednesday) (3 . Thursday) (4 . Friday) (5 . Saturday) (6 . Sunday))
